// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/cart_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "interview/pkg/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartRepositoryInterface is a mock of CartRepositoryInterface interface.
type MockCartRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryInterfaceMockRecorder
}

// MockCartRepositoryInterfaceMockRecorder is the mock recorder for MockCartRepositoryInterface.
type MockCartRepositoryInterfaceMockRecorder struct {
	mock *MockCartRepositoryInterface
}

// NewMockCartRepositoryInterface creates a new mock instance.
func NewMockCartRepositoryInterface(ctrl *gomock.Controller) *MockCartRepositoryInterface {
	mock := &MockCartRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepositoryInterface) EXPECT() *MockCartRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateCart mocks base method.
func (m *MockCartRepositoryInterface) CreateCart(cart *entity.CartEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockCartRepositoryInterfaceMockRecorder) CreateCart(cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockCartRepositoryInterface)(nil).CreateCart), cart)
}

// CreateCartItem mocks base method.
func (m *MockCartRepositoryInterface) CreateCartItem(cartItem *entity.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartItem", cartItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCartItem indicates an expected call of CreateCartItem.
func (mr *MockCartRepositoryInterfaceMockRecorder) CreateCartItem(cartItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartItem", reflect.TypeOf((*MockCartRepositoryInterface)(nil).CreateCartItem), cartItem)
}

// DeleteCartItem mocks base method.
func (m *MockCartRepositoryInterface) DeleteCartItem(cartItemID int, cartID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartItem", cartItemID, cartID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartItem indicates an expected call of DeleteCartItem.
func (mr *MockCartRepositoryInterfaceMockRecorder) DeleteCartItem(cartItemID, cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartItem", reflect.TypeOf((*MockCartRepositoryInterface)(nil).DeleteCartItem), cartItemID, cartID)
}

// GetCartBySessionID mocks base method.
func (m *MockCartRepositoryInterface) GetCartBySessionID(sessionID string) (*entity.CartEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartBySessionID", sessionID)
	ret0, _ := ret[0].(*entity.CartEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartBySessionID indicates an expected call of GetCartBySessionID.
func (mr *MockCartRepositoryInterfaceMockRecorder) GetCartBySessionID(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartBySessionID", reflect.TypeOf((*MockCartRepositoryInterface)(nil).GetCartBySessionID), sessionID)
}

// GetCartItemByCartIDAndProductName mocks base method.
func (m *MockCartRepositoryInterface) GetCartItemByCartIDAndProductName(cartID uint, productName string) (*entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemByCartIDAndProductName", cartID, productName)
	ret0, _ := ret[0].(*entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemByCartIDAndProductName indicates an expected call of GetCartItemByCartIDAndProductName.
func (mr *MockCartRepositoryInterfaceMockRecorder) GetCartItemByCartIDAndProductName(cartID, productName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemByCartIDAndProductName", reflect.TypeOf((*MockCartRepositoryInterface)(nil).GetCartItemByCartIDAndProductName), cartID, productName)
}

// GetCartItemsByCartID mocks base method.
func (m *MockCartRepositoryInterface) GetCartItemsByCartID(cartID uint) ([]entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemsByCartID", cartID)
	ret0, _ := ret[0].([]entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemsByCartID indicates an expected call of GetCartItemsByCartID.
func (mr *MockCartRepositoryInterfaceMockRecorder) GetCartItemsByCartID(cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemsByCartID", reflect.TypeOf((*MockCartRepositoryInterface)(nil).GetCartItemsByCartID), cartID)
}

// UpdateCartItem mocks base method.
func (m *MockCartRepositoryInterface) UpdateCartItem(cartItem *entity.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartItem", cartItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCartItem indicates an expected call of UpdateCartItem.
func (mr *MockCartRepositoryInterfaceMockRecorder) UpdateCartItem(cartItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartItem", reflect.TypeOf((*MockCartRepositoryInterface)(nil).UpdateCartItem), cartItem)
}
